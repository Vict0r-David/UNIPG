# Victor DAVID
# Created 03/10/2022


""" 
import sympy as sym
from sympy import Lambda
from sympy import Pow
from sympy import arg
import numpy 
"""

import math
import time



from sage.all import *
from sage.arith.power import generic_power

#import sage.calculus 


f = var('f')
f1 = var('f1')
f2 = var('f2')
f3 = var('f3')
f4 = var('f4')
f5 = var('f5')
f6 = var('f6')
c = var('c')
d = var('d')

deg = 2

deg = deg * (1-(var('x')* -0.4)) + f
deg = deg * (1-(var('x')* -0.4)) + f
deg = deg * (1-(var('x')* -0.4))
#deg = deg + generic_power(var('x'), 12)

print(deg)

deg = deg.expand()

print(deg)

for i in range(2,deg.degree(var('x'))+1):
    deg = deg.subs(generic_power(var('x'), i)==var('x'))

#print(deg.degree(var('x')))

print(deg)

symboles = deg.variables()

a = 1
print(type(deg))
print(type(a))
if type(a) == sage.symbolic.expression.Expression:
    symboles = a.variables()

deg = d + 0.2
print(type(deg))
deg = deg.subs(d==0.5)
print(type(deg))

symboles = deg.variables()
print(len(symboles))



#deg = deg.subs(var('x')==0.5)

#print(deg)



bg1 = (0.48*f + 0.4)* \
(-0.6*(-0.8*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(-0.8*(1 - 0.6*c)*(0.64*f + 0.2) + 1) + 1)*
(0.36*(1 - 0.6*c)*(1 - 0.6*d)*(1 - 0.7*f1)*(1 - 0.7*f2)*(1 - 0.7*f3)*(1 - 0.7*f4)*(1 - 0.7*f5)*(1 - 0.7*f6) + 0.4)
 + 1)

bb1 = (0.48*f + 0.4)* \
(-0.6*(0.64*(1 - 0.6*c)*(0.64*f + 0.2) + 0.2)*
(-0.6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*
(-0.6*(1 - 0.6*c)*(1 - 0.6*d)*(1 - 0.7*f1)*(1 - 0.7*f2)*(1 - 0.7*f3)*(1 - 0.7*f4)*(1 - 0.7*f5)*(1 - 0.7*f6) + 1) + 1)
 + 1)

"""
start = time.time()
bg1 = bg1.expand()
end = time.time()
elapsed = end - start
print(f"Time g1 = {elapsed}")


start = time.time()
bb1 = bb1.expand()
end = time.time()
elapsed = end - start
print(f"Time b1 = {elapsed}")

"""



"""
x1 = sym.Symbol('x1')
x2 = sym.Symbol('x2')
x3 = sym.Symbol('x3')
x4 = sym.Symbol('x4')
x5 = sym.Symbol('x5')
x6 = sym.Symbol('x6')
x7 = sym.Symbol('x7')
x8 = sym.Symbol('x8')
x9 = sym.Symbol('x9')
x10 = sym.Symbol('x10')


a = (1- x1) * (1- x2) * (1- x3) * (1- x4) * (1- x5) * (1- x6) 

b = (1- x1) * (1- x2) * (1- x3) * (1- x4) * (1- x5) * (1- x6) * (1- x1) * (1- x2) * (1- x3) * (1- x4) * (1- x5) * (1- x6)

#print(isinstance(a, sym.Basic))
#print(isinstance(b, sym.Basic))

#dico_deg[goal] = dico_deg[goal].subs(arg,dico_deg[arg]) 
#dico_deg[goal] = sym.expand(dico_deg[goal])
#dico_deg[goal] = dico_deg[goal].replace(Pow, lambda a,b: Pow(a,1))

print(a)
start = time.time()
a = a.expand()
end = time.time()
elapsed = end - start
#print(a)
print(elapsed)

print(f"\n passons Ã  B: {b}")
start = time.time()
b = b.expand()
end = time.time()
elapsed = end - start
#print(b)
print(elapsed)


da = sym.Symbol("da")
ab = sym.Symbol("ab")
d = sym.Symbol("d")
exp = (1 - (1 - d * da) * ab) * (1 - d * da)
exp = exp.expand()
print(exp)


x = []
for i in range(0, 100):
	x.append(sym.Symbol('x' + str(i)))

expressions = []

for i in range(0, 100):
	expressions.append((1 - x[i]))

for i in range(1, 100):
	expressions[i] *= expressions[i-1]

for i in range(0, 100):
    start = time.time()
    expressions[i] = expressions[i].expand()
    end = time.time()
    elapsed = end - start
    print(f"indice {i}: {elapsed}\n")  
"""










"""


f = sym.Symbol('f')
f1 = sym.Symbol('f1')
f2 = sym.Symbol('f2')
f3 = sym.Symbol('f3')
f4 = sym.Symbol('f4')
f5 = sym.Symbol('f5')
f6 = sym.Symbol('f6')
c = sym.Symbol('c')
d = sym.Symbol('d')

g1 = (0.48*f + 0.4)* \
(-0.6*(-0.8*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(-0.8*(1 - 0.6*c)*(0.64*f + 0.2) + 1) + 1)*
(0.36*(1 - 0.6*c)*(1 - 0.6*d)*(1 - 0.7*f1)*(1 - 0.7*f2)*(1 - 0.7*f3)*(1 - 0.7*f4)*(1 - 0.7*f5)*(1 - 0.7*f6) + 0.4)
 + 1)

b1 = (0.48*f + 0.4)* \
(-0.6*(0.64*(1 - 0.6*c)*(0.64*f + 0.2) + 0.2)*
(-0.6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*
(-0.6*(1 - 0.6*c)*(1 - 0.6*d)*(1 - 0.7*f1)*(1 - 0.7*f2)*(1 - 0.7*f3)*(1 - 0.7*f4)*(1 - 0.7*f5)*(1 - 0.7*f6) + 1) + 1)
 + 1)

cd = -0.0130827862770942*f*f1*f2*f3*f4*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0176168589933773*f*f1*f2*f3*f4*f5*f6 + 0.0186896946815631*f*f1*f2*f3*f4*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.0251669414191104*f*f1*f2*f3*f4*f5 + 0.0186896946815631*f*f1*f2*f3*f4*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.0251669414191104*f*f1*f2*f3*f4*f6 - 0.0266995638308045*f*f1*f2*f3*f4*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.035952773455872*f*f1*f2*f3*f4 + 0.0186896946815631*f*f1*f2*f3*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.0251669414191104*f*f1*f2*f3*f5*f6 - 0.0266995638308045*f*f1*f2*f3*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.035952773455872*f*f1*f2*f3*f5 - 0.0266995638308045*f*f1*f2*f3*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.035952773455872*f*f1*f2*f3*f6 + 0.0381422340440064*f*f1*f2*f3*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f1*f2*f3 + 0.0186896946815631*f*f1*f2*f4*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.0251669414191104*f*f1*f2*f4*f5*f6 - 0.0266995638308045*f*f1*f2*f4*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.035952773455872*f*f1*f2*f4*f5 - 0.0266995638308045*f*f1*f2*f4*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.035952773455872*f*f1*f2*f4*f6 + 0.0381422340440064*f*f1*f2*f4*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f1*f2*f4 - 0.0266995638308045*f*f1*f2*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.035952773455872*f*f1*f2*f5*f6 + 0.0381422340440064*f*f1*f2*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f1*f2*f5 + 0.0381422340440064*f*f1*f2*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f1*f2*f6 - 0.054488905777152*f*f1*f2*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0733730070528*f*f1*f2 + 0.0186896946815631*f*f1*f3*f4*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.0251669414191104*f*f1*f3*f4*f5*f6 - 0.0266995638308045*f*f1*f3*f4*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.035952773455872*f*f1*f3*f4*f5 - 0.0266995638308045*f*f1*f3*f4*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.035952773455872*f*f1*f3*f4*f6 + 0.0381422340440064*f*f1*f3*f4*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f1*f3*f4 - 0.0266995638308045*f*f1*f3*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.035952773455872*f*f1*f3*f5*f6 + 0.0381422340440064*f*f1*f3*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f1*f3*f5 + 0.0381422340440064*f*f1*f3*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f1*f3*f6 - 0.054488905777152*f*f1*f3*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0733730070528*f*f1*f3 - 0.0266995638308045*f*f1*f4*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.035952773455872*f*f1*f4*f5*f6 + 0.0381422340440064*f*f1*f4*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f1*f4*f5 + 0.0381422340440064*f*f1*f4*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f1*f4*f6 - 0.054488905777152*f*f1*f4*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0733730070528*f*f1*f4 + 0.0381422340440064*f*f1*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f1*f5*f6 - 0.054488905777152*f*f1*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0733730070528*f*f1*f5 - 0.054488905777152*f*f1*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0733730070528*f*f1*f6 + 0.07784129396736*f*f1*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.104818581504*f*f1 + 0.0186896946815631*f*f2*f3*f4*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.0251669414191104*f*f2*f3*f4*f5*f6 - 0.0266995638308045*f*f2*f3*f4*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.035952773455872*f*f2*f3*f4*f5 - 0.0266995638308045*f*f2*f3*f4*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.035952773455872*f*f2*f3*f4*f6 + 0.0381422340440064*f*f2*f3*f4*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f2*f3*f4 - 0.0266995638308045*f*f2*f3*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.035952773455872*f*f2*f3*f5*f6 + 0.0381422340440064*f*f2*f3*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f2*f3*f5 + 0.0381422340440064*f*f2*f3*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f2*f3*f6 - 0.054488905777152*f*f2*f3*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0733730070528*f*f2*f3 - 0.0266995638308045*f*f2*f4*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.035952773455872*f*f2*f4*f5*f6 + 0.0381422340440064*f*f2*f4*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f2*f4*f5 + 0.0381422340440064*f*f2*f4*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f2*f4*f6 - 0.054488905777152*f*f2*f4*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0733730070528*f*f2*f4 + 0.0381422340440064*f*f2*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f2*f5*f6 - 0.054488905777152*f*f2*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0733730070528*f*f2*f5 - 0.054488905777152*f*f2*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0733730070528*f*f2*f6 + 0.07784129396736*f*f2*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.104818581504*f*f2 - 0.0266995638308045*f*f3*f4*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.035952773455872*f*f3*f4*f5*f6 + 0.0381422340440064*f*f3*f4*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f3*f4*f5 + 0.0381422340440064*f*f3*f4*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f3*f4*f6 - 0.054488905777152*f*f3*f4*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0733730070528*f*f3*f4 + 0.0381422340440064*f*f3*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f3*f5*f6 - 0.054488905777152*f*f3*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0733730070528*f*f3*f5 - 0.054488905777152*f*f3*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0733730070528*f*f3*f6 + 0.07784129396736*f*f3*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.104818581504*f*f3 + 0.0381422340440064*f*f4*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.05136110493696*f*f4*f5*f6 - 0.054488905777152*f*f4*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0733730070528*f*f4*f5 - 0.054488905777152*f*f4*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0733730070528*f*f4*f6 + 0.07784129396736*f*f4*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.104818581504*f*f4 - 0.054488905777152*f*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0733730070528*f*f5*f6 + 0.07784129396736*f*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.104818581504*f*f5 + 0.07784129396736*f*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.104818581504*f*f6 - 0.0440835637248*f*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.39358390272*f - 0.00246311964315648*f1*f2*f3*f4*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.003180114588672*f1*f2*f3*f4*f5*f6 + 0.0035187423473664*f1*f2*f3*f4*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.00454302084096*f1*f2*f3*f4*f5 + 0.0035187423473664*f1*f2*f3*f4*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.00454302084096*f1*f2*f3*f4*f6 - 0.005026774781952*f1*f2*f3*f4*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0064900297728*f1*f2*f3*f4 + 0.0035187423473664*f1*f2*f3*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.00454302084096*f1*f2*f3*f5*f6 - 0.005026774781952*f1*f2*f3*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0064900297728*f1*f2*f3*f5 - 0.005026774781952*f1*f2*f3*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0064900297728*f1*f2*f3*f6 + 0.00718110683136*f1*f2*f3*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f1*f2*f3 + 0.0035187423473664*f1*f2*f4*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.00454302084096*f1*f2*f4*f5*f6 - 0.005026774781952*f1*f2*f4*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0064900297728*f1*f2*f4*f5 - 0.005026774781952*f1*f2*f4*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0064900297728*f1*f2*f4*f6 + 0.00718110683136*f1*f2*f4*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f1*f2*f4 - 0.005026774781952*f1*f2*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0064900297728*f1*f2*f5*f6 + 0.00718110683136*f1*f2*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f1*f2*f5 + 0.00718110683136*f1*f2*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f1*f2*f6 - 0.0102587240448*f1*f2*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.01324495872*f1*f2 + 0.0035187423473664*f1*f3*f4*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.00454302084096*f1*f3*f4*f5*f6 - 0.005026774781952*f1*f3*f4*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0064900297728*f1*f3*f4*f5 - 0.005026774781952*f1*f3*f4*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0064900297728*f1*f3*f4*f6 + 0.00718110683136*f1*f3*f4*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f1*f3*f4 - 0.005026774781952*f1*f3*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0064900297728*f1*f3*f5*f6 + 0.00718110683136*f1*f3*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f1*f3*f5 + 0.00718110683136*f1*f3*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f1*f3*f6 - 0.0102587240448*f1*f3*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.01324495872*f1*f3 - 0.005026774781952*f1*f4*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0064900297728*f1*f4*f5*f6 + 0.00718110683136*f1*f4*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f1*f4*f5 + 0.00718110683136*f1*f4*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f1*f4*f6 - 0.0102587240448*f1*f4*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.01324495872*f1*f4 + 0.00718110683136*f1*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f1*f5*f6 - 0.0102587240448*f1*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.01324495872*f1*f5 - 0.0102587240448*f1*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.01324495872*f1*f6 + 0.014655320064*f1*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.0189213696*f1 + 0.0035187423473664*f2*f3*f4*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.00454302084096*f2*f3*f4*f5*f6 - 0.005026774781952*f2*f3*f4*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0064900297728*f2*f3*f4*f5 - 0.005026774781952*f2*f3*f4*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0064900297728*f2*f3*f4*f6 + 0.00718110683136*f2*f3*f4*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f2*f3*f4 - 0.005026774781952*f2*f3*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0064900297728*f2*f3*f5*f6 + 0.00718110683136*f2*f3*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f2*f3*f5 + 0.00718110683136*f2*f3*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f2*f3*f6 - 0.0102587240448*f2*f3*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.01324495872*f2*f3 - 0.005026774781952*f2*f4*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0064900297728*f2*f4*f5*f6 + 0.00718110683136*f2*f4*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f2*f4*f5 + 0.00718110683136*f2*f4*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f2*f4*f6 - 0.0102587240448*f2*f4*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.01324495872*f2*f4 + 0.00718110683136*f2*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f2*f5*f6 - 0.0102587240448*f2*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.01324495872*f2*f5 - 0.0102587240448*f2*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.01324495872*f2*f6 + 0.014655320064*f2*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.0189213696*f2 - 0.005026774781952*f3*f4*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.0064900297728*f3*f4*f5*f6 + 0.00718110683136*f3*f4*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f3*f4*f5 + 0.00718110683136*f3*f4*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f3*f4*f6 - 0.0102587240448*f3*f4*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.01324495872*f3*f4 + 0.00718110683136*f3*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f3*f5*f6 - 0.0102587240448*f3*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.01324495872*f3*f5 - 0.0102587240448*f3*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.01324495872*f3*f6 + 0.014655320064*f3*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.0189213696*f3 + 0.00718110683136*f4*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.009271471104*f4*f5*f6 - 0.0102587240448*f4*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.01324495872*f4*f5 - 0.0102587240448*f4*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.01324495872*f4*f6 + 0.014655320064*f4*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.0189213696*f4 - 0.0102587240448*f5*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.01324495872*f5*f6 + 0.014655320064*f5*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.0189213696*f5 + 0.014655320064*f6*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) - 0.0189213696*f6 - 0.00393265152*(1 - 0.6*f1)*(1 - 0.6*f2)*(1 - 0.6*f3)*(1 - 0.6*f4)*(1 - 0.6*f5)*(1 - 0.6*f6)*(0.64*f + 0.2) + 0.367203328


sg = str(g1)
cpt_add = 0
cpt_mul = 0
for elem in sg:
    if elem == "+" or elem == "-":
        cpt_add += 1
    elif elem == "*":
        cpt_mul += 1
print(f"nb terme add before g1 : {cpt_add}\n ")
#print(f"nb terme mul before g1: {cpt_mul}\n ")


sb = str(b1)
cpt_add = 0
cpt_mul = 0
for elem in sb:
    if elem == "+" or elem == "-":
        cpt_add += 1
    elif elem == "*":
        cpt_mul += 1
print(f"nb terme add before b1 : {cpt_add}\n ")
#print(f"nb terme mul before b1: {cpt_mul}\n ")


#scd = str(cd)
#cpt_add = 0
#cpt_mul = 0
#for elem in scd:
#    if elem == "+" or elem == "-":
#        cpt_add += 1
#    elif elem == "*":
#        cpt_mul += 1
#print(f"nb terme add before cd : {cpt_add}\n ")
#print(f"nb terme mul before cd: {cpt_mul}\n ")


start = time.time()
g1 = g1.expand()
#g1= g1.expand(deep=True, modulus=True, power_base=True, power_exp=True, mul=True, log=True, multinomial=True, basic=True)
end = time.time()
elapsed = end - start
print(f"Time g1 = {elapsed}")


start = time.time()
b1 = b1.expand()
#b1 = b1.expand(deep=True, modulus=True, power_base=True, power_exp=True, mul=True, log=True, multinomial=True, basic=True)
end = time.time()
elapsed = end - start
print(f"Time b1 = {elapsed}")



#start = time.time()
#cd = cd.expand()
#end = time.time()
#elapsed = end - start
#print(f"Time cd = {elapsed}")



sg = str(g1)
cpt_add = 0
cpt_mul = 0
for elem in sg:
    if elem == "+" or elem == "-":
        cpt_add += 1
    elif elem == "*":
        cpt_mul += 1
print(f"nb terme add after g1 : {cpt_add}\n ")
#print(f"nb terme mul after g1: {cpt_mul}\n ")


sb = str(b1)
cpt_add = 0
cpt_mul = 0
for elem in sb:
    if elem == "+" or elem == "-":
        cpt_add += 1
    elif elem == "*":
        cpt_mul += 1
print(f"nb terme add after b1 : {cpt_add}\n ")
#print(f"nb terme mul after b1: {cpt_mul}\n ")


#scd = str(cd)
#cpt_add = 0
#cpt_mul = 0
#for elem in scd:
#    if elem == "+" or elem == "-":
#        cpt_add += 1
#    elif elem == "*":
#        cpt_mul += 1
#print(f"nb terme add after cd : {cpt_add}\n ")
#print(f"nb terme mul after cd: {cpt_mul}\n ")
"""

#nb terme add before first expand : 24
#nb terme mul before first expand : 37